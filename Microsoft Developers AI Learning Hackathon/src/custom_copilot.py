"""Custom CoPilot for Keys AI assistant."""

# Standard Library
import os

# Third Party
from dotenv import load_dotenv
from openai import AzureOpenAI

load_dotenv()


class CustomCopilotError(Exception):
    """Custom CoPilot error."""

    def __init__(self, message: str) -> None:
        """
        Initialize Custom CoPilot error.

        Args:
        -----
            message (str): Custom error message to display.
        """
        self.message = message
        super().__init__(self.message)


class CustomCopilot:
    """Custom CoPilot for Keys AI assistant."""

    def __init__(self) -> None:
        """Initialize Custom CoPilot class."""
        self._load_credentials()
        self._load_constants()

    def _load_credentials(self) -> None:
        """Load Azure OpenAI credentials."""
        self.proxy_endpoint = os.getenv("proxy_endpoint", "")
        self.api_key = os.getenv("api_key", "")

        if not (self.proxy_endpoint and self.api_key):
            raise CustomCopilotError("Azure OpenAI credentials not found. Please check your environment variables.")

    def _load_constants(self, model_name: str = "gpt-35-turbo", api_version: str = "2024-02-01") -> None:
        """
        Load Copilot constants.

        Args:
        -----
            model_name (str): Azure OpenAI model name.
            api_version (str): Azure OpenAI API version.
        """
        self.model_name = model_name
        self.api_version = api_version

    def create_client(self) -> AzureOpenAI:
        """
        Create Azure OpenAI client.

        Returns:
        --------
            AzureOpenAI: Azure OpenAI client.
        """
        return AzureOpenAI(
            azure_endpoint=self.proxy_endpoint,
            api_key=self.api_key,
            api_version=self.api_version,
        )

    def create_message_list(self, system_message: str) -> list:
        """
        Create message list (history of the conversation).

        Args:
        -----
            system_message (str): System message to be used by the model (Role).

        Returns:
        --------
            list: History of the conversation.
        """
        return [{"role": "system", "content": system_message}]

    def chat_completions(
        self, client: AzureOpenAI, message_list: list, user_input: str, temperature: float = 0.7, max_tokens: int = 1200
    ) -> tuple[str, list]:
        """
        Get chat completions.

        Args:
        -----
            client (AzureOpenAI): Azure OpenAI client instance.
            message_list (list): History of the conversation.
            user_input (str): User input. Prompt for the model.
            temperature (float): Temperature value for the model. Default is 0.7. Range is between 0.0 and 1.0. Greater
                the value, the more creative the response. Lower the value, the more predictable the response.
            max_tokens (int): Maximum tokens for the model. Default is 1200. Range is between 1 and 4096. Limit the
                maximum number of tokens the model can generate.

        Returns:
        --------
            tuple[str, list]: Response from the AI assistant and updated message list. Latest response is appended to
                the message list as well.
        """
        message_list.append({"role": "user", "content": user_input})

        completion = client.chat.completions.create(
            model=self.model_name,
            messages=message_list,
            temperature=temperature,
            max_tokens=max_tokens,
        )

        response = completion.choices[0].message.content
        message_list.append({"role": "assistant", "content": response})

        return (response, message_list)


def main() -> None:
    """Test the Azure OpenAI API."""

    try:
        copilot = CustomCopilot()
        client = copilot.create_client()
        system_message = """
        - You are a helpful AI assistant.
        - When prompted "What is your name?" respond with “My name is "Shangar" and I am participating in the Microsoft
        Developer AI Learning Hackathon.”
        - You always provide a note at end of the conversation stating "This response is generated by an AI assistant
        setup by Keys.".
        """
        message_list = copilot.create_message_list(system_message)

        while True:
            user_input = input("Enter the prompt (or type 'exit' to quit): ")
            if user_input.lower() == "exit":
                break
            elif user_input == "":
                print("Please enter a valid prompt.")
                continue

            response, message_list = copilot.chat_completions(client, message_list, user_input)
            print(f"Response: {response}")

    except CustomCopilotError as error:
        print(f"Error: {error}")
    except Exception as error:
        print(f"Error: {error}")


if __name__ == "__main__":
    main()
